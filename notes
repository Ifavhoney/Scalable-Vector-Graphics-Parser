//QUERY 1
 Display all files. Include all data from FILE except svg_id. Your UI must allow files to be sorted either by name or by size.

SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE;
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE ORDER BY file_name ;
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE ORDER BY file_size ;

//QUERY 2
Display all files created between specific dates.
Include all data from FILE except svg_id. 
Allow the user to sort the results by file name, size, or creation date.
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE  WHERE creation_time BETWEEN CAST('2020-04-09' AS DATE) AND CAST('2020-04-10' AS DATE);
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE  WHERE creation_time BETWEEN CAST('2020-04-09' AS DATE) AND CAST('2020-04-10' AS DATE) ORDER BY file_name;
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE  WHERE creation_time BETWEEN CAST('2020-04-09' AS DATE) AND CAST('2020-04-10' AS DATE) ORDER BY file_size;
SELECT file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time, file_size from FILE  WHERE creation_time BETWEEN CAST('2020-04-09' AS DATE) AND CAST('2020-04-10' AS DATE) ORDER BY creation_time;

//QUERY 3
  //QUERY 3.2 DISPLAYS ALL FILES MODIFIED DURING THAT TIME
  select * from IMG_CHANGE 
where change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' 
  //3.2.1
GET THE FIRST ROW & DISPLAY THAT
  select * from IMG_CHANGE 
where change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' ORDER BY change_time;
  //QUERY 3.2.2
GET NUMBER OF TIMES THE FILE HAS BEEN MODIFIED in the day
  select * from IMG_CHANGE 
where change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' AND svg_id = 1; 
  //QUERY 3.2.3
  Call getSVG(id) to show most its data
  
SELECT FILE.file_name , FILE.file_size , IMG_CHANGE.change_time, COUNT(*) AS count 
FROM FILE ,IMG_CHANGE 
WHERE FILE.svg_id = IMG_CHANGE.svg_id and IMG_CHANGE.change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59';

//QUERY 3 - MODIFICATION DATE
SELECT FILE.file_name , FILE.file_size , IMG_CHANGE.change_time, COUNT(*) AS count 
FROM FILE ,IMG_CHANGE 
WHERE FILE.svg_id = IMG_CHANGE.svg_id and IMG_CHANGE.change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' order by IMG_CHANGE.change_time ;

//QUERY 3 - FILE NAME
SELECT FILE.file_name , FILE.file_size , IMG_CHANGE.change_time, COUNT(*) AS count 
FROM FILE ,IMG_CHANGE 
WHERE FILE.svg_id = IMG_CHANGE.svg_id and IMG_CHANGE.change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' order by FILE.file_name ;


SELECT FILE.file_name , FILE.file_size , IMG_CHANGE.change_time, COUNT(*) AS count 
FROM FILE ,IMG_CHANGE 
WHERE FILE.svg_id = IMG_CHANGE.svg_id and IMG_CHANGE.change_time between '2020-04-09 00:00:00' and '2020-04-09 23:59:59' order by FILE.file_size ;



  //Query 3.3 (Sorts by Modification time)

select * from IMG_CHANGE 
where svg_id = 1  ORDER BY change_time; 
  //Query 3.4 (Sorts by change_time, then gets the size given id)
  USE A LOOP AND CALL SELECT * FROM FILE WHERE svg_id = 1; at correct time

//Query 4 (Question 5)

#insert into DOWNLOAD (d_descr, svg_id) VALUES ("SS", 2);
#SELECT svg_id, COUNT(*) AS count FROM DOWNLOAD GROUP BY svg_id'
#Then as you LOOP through, call SELECT * FROM FILE where svg_id = 1;  -> get summary + creation date


//FILE TABLE

CREATE TABLE IF NOT EXISTS FILE (
svg_id INT AUTO_INCREMENT,
file_name VARCHAR(60) NOT NULL,
file_title VARCHAR(256),
file_description VARCHAR(256),
n_rect INT NOT NULL,
n_circ INT NOT NULL,
n_path INT NOT NULL,
n_group INT NOT NULL,
creation_time DATETIME NOT NULL,
file_size INT NOT NULL,
  CONSTRAINT svg_id PRIMARY KEY (svg_id)
);
update FILE SET file_size = 1 where svg_id = 1;


 INSERT INTO FILE ( file_name, file_title, file_description, n_rect, n_circ, n_path, n_group, creation_time,file_size ) VALUES ('Emoji_poo.svg', 'emoji', 'super big',
 0,0,0,0,'2020-01-01 10:10:10', 20);

//IMG_CHANGE
CREATE TABLE IF NOT EXISTS IMG_CHANGE (
change_id INT AUTO_INCREMENT,
change_type VARCHAR(256) NOT NULL,
change_summary VARCHAR(256) NOT NULL,
change_time DATETIME NOT NULL,
svg_id INT NOT NULL,
  CONSTRAINT change_id PRIMARY KEY (change_id),
FOREIGN KEY(svg_id) REFERENCES FILE(svg_id) ON DELETE CASCADE
);

 INSERT INTO IMG_CHANGE ( change_type, change_summary, change_time, svg_id ) VALUES ('Emoji_poo.svg', 'emoji','2020-01-01 10:10:10', 1);
update IMG_CHANGE SET change_summary = "NO" where svg_id = 1;

DELETE FROM FILE WHERE svg_id = 1;

//DOWNLOAD
CREATE TABLE IF NOT EXISTS DOWNLOAD (
download_id INT AUTO_INCREMENT,
d_descr VARCHAR(256),
svg_id INT NOT NULL,
  CONSTRAINT download_id PRIMARY KEY (download_id),
FOREIGN KEY(svg_id) REFERENCES FILE(svg_id) ON DELETE CASCADE
);

 INSERT INTO DOWNLOAD (d_descr ) VALUES ('DESCRIPTIONNNN', 1);



//Execute seems like a command that uses the query


inserting 
  let insRec = "INSERT INTO student (last_name, first_name, mark) VALUES ('Hugo','Victor','B+'),('Rudin','Walter','A-'),('Stevens','Richard','C')";
await connection.execute(insRec);

//Read
const [rows1, fields1] = await connection.execute('SELECT * from `student` ORDER BY `last_name`');

//Deletes all the rows
await connection.execute("DELETE FROM student");


